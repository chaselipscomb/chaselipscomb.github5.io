{"ast":null,"code":"import _slicedToArray from \"/Users/chaselipscomb/Documents/WD/reactportfolio/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/chaselipscomb/Documents/WD/reactportfolio/my-app/src/components/Name.js\";\nimport React, { useState, useRef, useEffect } from 'react';\n\nconst Name = () => {\n  const message = [\"C\", \"h\", \"a\", \"s\", \"e\", \" \", \"L\", \"i\", \"p\", \"s\", \"c\", \"o\", \"m\", \"b\", \" \", \"W\", \"e\", \"b\", \" \", \"D\", \"e\", \"v\", \"e\", \"l\", \"o\", \"p\", \"e\", \"r\"];\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        txt = _useState2[0],\n        setTxt = _useState2[1];\n\n  const intervalRef = useRef();\n  useEffect(() => {\n    let index = 0; // init the index\n\n    clearInterval(intervalRef.current); // clear the interval if message changes\n\n    if (!message.length) return; // do nothing if message is empty\n\n    intervalRef.current = setInterval(() => {\n      setTxt(t => t + message[index]);\n      index += 1;\n      if (index === message.length) clearInterval(intervalRef.current); // clear interval when message ends\n    }, 1000);\n    return () => clearInterval(intervalRef.current); // clear interval if component is unmounted\n  }, [message, intervalRef, setTxt]);\n  return React.createElement(React.Fragment, null, React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Chase Lipscomb Web Developer\")), React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, txt)));\n};\n\nexport default Name;","map":{"version":3,"sources":["/Users/chaselipscomb/Documents/WD/reactportfolio/my-app/src/components/Name.js"],"names":["React","useState","useRef","useEffect","Name","message","txt","setTxt","intervalRef","index","clearInterval","current","length","setInterval","t"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,OAAO,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,EAAiF,GAAjF,EAAsF,GAAtF,EAA2F,GAA3F,EAAgG,GAAhG,EAAqG,GAArG,EAA0G,GAA1G,EAA+G,GAA/G,EAAoH,GAApH,EAAyH,GAAzH,EAA8H,GAA9H,EAAmI,GAAnI,EAAwI,GAAxI,CAAhB;;AADe,oBAEOJ,QAAQ,CAAC,EAAD,CAFf;AAAA;AAAA,QAERK,GAFQ;AAAA,QAEHC,MAFG;;AAGf,QAAMC,WAAW,GAAGN,MAAM,EAA1B;AAEIC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,KAAK,GAAG,CAAZ,CADY,CACG;;AAEfC,IAAAA,aAAa,CAACF,WAAW,CAACG,OAAb,CAAb,CAHY,CAGwB;;AAEpC,QAAI,CAACN,OAAO,CAACO,MAAb,EAAqB,OALT,CAKiB;;AAE7BJ,IAAAA,WAAW,CAACG,OAAZ,GAAsBE,WAAW,CAAC,MAAM;AACpCN,MAAAA,MAAM,CAACO,CAAC,IAAIA,CAAC,GAAGT,OAAO,CAACI,KAAD,CAAjB,CAAN;AAEAA,MAAAA,KAAK,IAAI,CAAT;AAEA,UAAIA,KAAK,KAAKJ,OAAO,CAACO,MAAtB,EAA8BF,aAAa,CAACF,WAAW,CAACG,OAAb,CAAb,CALM,CAK8B;AACrE,KANgC,EAM9B,IAN8B,CAAjC;AASA,WAAO,MAAMD,aAAa,CAACF,WAAW,CAACG,OAAb,CAA1B,CAhBY,CAgBqC;AACpD,GAjBQ,EAiBN,CAACN,OAAD,EAAUG,WAAV,EAAuBD,MAAvB,CAjBM,CAAT;AAsBA,SACI,0CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQ;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAR,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQ;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBD,GAAtB,CAAR,CAFJ,CADJ;AAMH,CAjCL;;AAkCI,eAAeF,IAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nconst Name = () => {\n    const message = [\"C\", \"h\", \"a\", \"s\", \"e\", \" \", \"L\", \"i\", \"p\", \"s\", \"c\", \"o\", \"m\", \"b\", \" \", \"W\", \"e\", \"b\", \" \", \"D\", \"e\", \"v\", \"e\", \"l\", \"o\", \"p\", \"e\", \"r\"];\n    const [txt, setTxt] = useState('');\n    const intervalRef = useRef();\n\n        useEffect(() => {\n            let index = 0; // init the index\n\n            clearInterval(intervalRef.current); // clear the interval if message changes\n\n            if (!message.length) return; // do nothing if message is empty\n\n            intervalRef.current = setInterval(() => {\n                setTxt(t => t + message[index]);\n\n                index += 1;\n\n                if (index === message.length) clearInterval(intervalRef.current); // clear interval when message ends\n            }, 1000);\n\n\n            return () => clearInterval(intervalRef.current); // clear interval if component is unmounted\n        }, [message, intervalRef, setTxt]);\n\n\n\n\n        return (\n            <>\n                <center><h1 className=\"Name\">Chase Lipscomb Web Developer</h1></center>\n                <center><h1 className=\"Name\">{txt}</h1></center>\n            </>\n        )\n    }\n    export default Name"]},"metadata":{},"sourceType":"module"}